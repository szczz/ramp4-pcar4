import{v as s,x as i,O as h,J as d,D as S,ca as n,bL as m,co as g,b9 as y}from"./main-D07jEvGH.js";import{f as R,i as w}from"./utils-D6r5P7gT.js";import{o as v}from"./utils-YvsstqtW.js";let o=class extends S{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:m(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:h,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([d("esri.rest.support.ProjectParameters")],o);const J=o,O=g(J);async function N(e,t,r){t=O(t);const a=R(e),p={...a.query,f:"json",...t.toJSON()},f=t.outSpatialReference,c=m(t.geometries[0]),u=w(p,r);return y(a.path+"/project",u).then(({data:{geometries:l}})=>v(l,c,f))}export{J as m,N as n};
