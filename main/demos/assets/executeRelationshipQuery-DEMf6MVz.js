import{f as m}from"./utils-D6r5P7gT.js";import{b9 as p,ca as y}from"./main-D07jEvGH.js";import{t as j}from"./query-Cf4hpSE1.js";import{d as R}from"./FeatureSet-DkgldrXg.js";import{d as l}from"./RelationshipQuery-BnPmjIjh.js";import"./preload-helper-ExcqyqRp.js";import"./normalizeUtils-DNUqLo6p.js";import"./utils-YvsstqtW.js";import"./pbfQueryUtils-DMvaoRQ3.js";import"./pbf-BkRCSGOZ.js";import"./memoryEstimations-Dg6D1vtw.js";import"./OptimizedGeometry-CZEihb4R.js";import"./OptimizedFeatureSet-BLSWYd4o.js";import"./queryZScale-CtbMPZVc.js";import"./projection-Dm4lMAiE.js";import"./Field-DrVvW_h_.js";import"./fieldType-CoIzguOf.js";import"./Query-CUY6BtTx.js";import"./TimeExtent-CPjJdscH.js";function b(r,e){const t=r.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!e?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(r,e,t){const n=await f(r,e,t),o=n.data,s=o.geometryType,a=o.spatialReference,i={};for(const c of o.relatedRecordGroups){const d={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)i[c.objectId]=d;else for(const u of Object.keys(c))u!=="relatedRecords"&&(i[c[u]]=d)}return{...n,data:i}}async function h(r,e,t){const n=await f(r,e,t,{returnCountOnly:!0}),o=n.data,s={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(s[a.objectId]=a.count);return{...n,data:s}}async function f(r,e,t={},n){const o=j({...r.query,f:"json",...n,...b(e,n)});return p(r.path+"/queryRelatedRecords",{...t,query:{...t.query,...o}})}async function $(r,e,t){e=l.from(e);const n=m(r);return F(n,e,t).then(o=>{const s=o.data,a={};return Object.keys(s).forEach(i=>a[i]=R.fromJSON(s[i])),a})}async function E(r,e,t){e=l.from(e);const n=m(r);return h(n,e,{...t}).then(o=>o.data)}export{$ as executeRelationshipQuery,E as executeRelationshipQueryForCount};
