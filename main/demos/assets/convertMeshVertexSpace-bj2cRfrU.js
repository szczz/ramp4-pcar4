import{U as m,s,ak as p}from"./main-D07jEvGH.js";import{p as n}from"./MeshVertexAttributes-C7LBRSza.js";import{B as a}from"./vertexSpaceConversion-R5BFelXh.js";import"./preload-helper-ExcqyqRp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-C7DAevmu.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-ChV6ma3n.js";import"./spatialReferenceEllipsoidUtils-DWGyqPSR.js";import"./computeTranslationToOriginAndRotation-nctri4OY.js";import"./projection-Dm4lMAiE.js";import"./projectPointToVector-BRc4iZbp.js";import"./meshVertexSpaceUtils-DsYcexYr.js";import"./MeshLocalVertexSpace-CEde2ZWk.js";import"./vec3-DB0x9S98.js";import"./BufferView-DTcaNOFs.js";import"./vec2-maR1OrZI.js";import"./vec42-CKs01hkn.js";import"./vec4-Bbqx4Sgt.js";async function P(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{P as convertMeshVertexSpace};
